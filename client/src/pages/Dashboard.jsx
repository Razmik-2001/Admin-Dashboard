import React, {useEffect, useState} from 'react';import {useDispatch, useSelector} from 'react-redux';import Swal from 'sweetalert2';import app from "../App.module.css";import style from '../assets/css/dashboard.module.css';import {addUser, deleteUser, getUsers, getUserTask, updateUser} from "../app/features/dashboard/dashboardThunk";import {IoCloseSharp} from "react-icons/io5";import {toast} from "react-toastify";import {resetDashboard, resetError, resetMessage} from "../app/features/dashboard/dashboardSlice";import {addTask, getAllTask} from '../app/features/tasks/taskThunk';import {useNavigate} from "react-router-dom";function Dashboard() {    const [modalData, setModalData] = useState({        name: '',        surname: '',        email: '',        password: '',        tel: '+374',        role: 'user'    });    const [isModalOpen, setIsModalOpen] = useState(false);    const [taskModal, setTaskModal] = useState(false);    const [taskData, setTaskData] = useState({        title: '',        status: 'pending',        description: ''    });    const [selectedUserId, setSelectedUserId] = useState(null);    const {title, status, description} = taskModal;    const {name, surname, email, password, tel, role} = modalData;    const dispatch = useDispatch();    const navigate = useNavigate();    const {users, loading, error, message} = useSelector(state => state.dashboard);    const {allTasks} = useSelector(state => state.tasks);    const total = users?.length || 0;    const pendingTaskTotal = allTasks.filter(task => task.status === 'pending').length;    const completedTaskTotal = allTasks.filter(task => task.status === 'completed').length;    useEffect(() => {        console.log(11111);        dispatch(getUsers());        dispatch(getAllTask());        dispatch(resetDashboard());    }, [dispatch]);    useEffect(() => {        if (error) {            toast.error(error);            dispatch(resetError());        }    }, [error, message, dispatch]);    const updateStatus = (id, status) => {        Swal.fire({            title: 'Are you sure?',            text: `Do you want to change status to "${status}"?`,            icon: 'question',            showCancelButton: true,            confirmButtonText: 'Yes, update it!',            cancelButtonText: 'Cancel'        }).then((result) => {            if (result.isConfirmed) {                dispatch(updateUser({id, status}))                    .then((res) => {                        toast.success(res.payload.message);                        dispatch(resetMessage());                    })                    .catch((err) => {                        toast.error(err.message || "Update failed");                    });            }        });    };    const removeUser = (id) => {        Swal.fire({            title: 'Are you sure?',            text: "You won't be able to revert this!",            icon: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: 'Yes, delete it!'        }).then((result) => {            if (result.isConfirmed) {                dispatch(deleteUser(id)).then((res) => {                    Swal.fire('Deleted!', res.payload.message, 'success');                    dispatch(resetMessage());                });            }        });    };    const handleSubmit = (e) => {        e.preventDefault();        dispatch(addUser(modalData)).then((res) => {            dispatch(getUsers());            setIsModalOpen(false);            setModalData({                name: '',                surname: '',                email: '',                password: '',                tel: '+374',                role: 'user'            });            toast.success(res.payload.message);        });    };    const handleChange = (e) => {        setModalData({            ...modalData,            [e.target.name]: e.target.value        });    };    const changeTasksData = (ev) => {        setTaskData({            ...taskData,            [ev.target.name]: ev.target.value        })    }    const handleAdd = (ev) => {        ev.preventDefault();        dispatch(addTask({data: taskData, id: selectedUserId})).then((res) => {            dispatch(getUsers());            setTaskModal(false);            setTaskData({                title: '',                status: 'pending',                description: ''            });            toast.success(res.payload.message);        })    }    const getTasksFromUser = (id) => {        navigate('/api/user-tasks');        dispatch(getUserTask(id));    }    return (        <div className={app.container}>            <h1 className={app.title}>Dashboard</h1>            <div className={style.statsGrid}>                <div className={style.statCard}>                    <div className={`${style.statIcon} ${style.iconPrimary}`}>                        <i className="fas fa-users"></i>                    </div>                    <div className={style.statInfo}>                        <h3>{total}</h3>                        <p>Total Users</p>                    </div>                </div>                <div className={style.statCard}>                    <div className={`${style.statIcon} ${style.iconSuccess}`}>                        <i className="fas fa-check-circle"></i>                    </div>                    <div className={style.statInfo}>                        <h3>{completedTaskTotal}</h3>                        <p>Completed Tasks</p>                    </div>                </div>                <div className={style.statCard}>                    <div className={`${style.statIcon} ${style.iconWarning}`}>                        <i className="fas fa-clock"></i>                    </div>                    <div className={style.statInfo}>                        <h3>{pendingTaskTotal}</h3>                        <p>Pending Tasks</p>                    </div>                </div>                <div className={style.statCard}>                    <div className={`${style.statIcon} ${style.iconDanger}`}>                        <i className="fas fa-ban"></i>                    </div>                    <div className={style.statInfo}>                        <h3>{users?.filter(user => user.status === 'Blocked').length || 0}</h3>                        <p>Blocked Users</p>                    </div>                </div>            </div>            <section className={style.usersSection}>                <div className={style.sectionHeader}>                    <h2 className={style.sectionTitle}>All Users</h2>                    <button type="button" className={`btn ${style.btnPrimary}`} onClick={() => setIsModalOpen(true)}>                        Add User                    </button>                </div>                {isModalOpen && (                    <div className={style.modal} id="addUserModal">                        <div className={style.modalContent}>                            <IoCloseSharp className={style.closeBtn} onClick={() => setIsModalOpen(false)}/>                            <div className={style.modalHeader}>                                <h3 className={style.modalTitle}>Add New User</h3>                            </div>                            <form onSubmit={handleSubmit}>                                <div className={style.formGroup}>                                    <label htmlFor="userFirstname">First Name</label>                                    <input type="text" name="name" value={name} onChange={handleChange} required                                           placeholder="Enter first name"/>                                </div>                                <div className={style.formGroup}>                                    <label htmlFor="userLastname">Last Name</label>                                    <input type="text" name="surname" value={surname} onChange={handleChange} required                                           placeholder="Enter last name"/>                                </div>                                <div className={style.formGroup}>                                    <label htmlFor="userEmail">Email</label>                                    <input type="email" name="email" value={email} onChange={handleChange} required                                           placeholder="Enter email"/>                                </div>                                <div className={style.formGroup}>                                    <label htmlFor="userPassword">Password</label>                                    <input type="password" name="password" value={password} onChange={handleChange}                                           required placeholder="Enter password"/>                                </div>                                <div className={style.formGroup}>                                    <label htmlFor="userPhoneNumber">Phone Number</label>                                    <input type="text" name="tel" value={tel} onChange={handleChange} required                                           placeholder="Enter phone number"/>                                </div>                                <div className={style.formGroup}>                                    <label htmlFor="userRole">Role</label>                                    <select name="role" value={role} onChange={handleChange} required>                                        <option value="user">User</option>                                        <option value="admin">Admin</option>                                    </select>                                </div>                                <div className={style.modalFooter}>                                    <button type="submit" className={`btn ${style.btnPrimary}`}>Submit</button>                                </div>                            </form>                        </div>                    </div>                )}                <table className={style.table}>                    <thead>                    <tr>                        <th>User</th>                        <th>Email</th>                        <th>Status</th>                        <th style={{textAlign: 'center'}}>Tasks</th>                        <th style={{textAlign: 'center'}}>Actions</th>                    </tr>                    </thead>                    <tbody>                    {loading ? (                        <tr>                            <td colSpan="5">Loading...</td>                        </tr>                    ) : users?.length > 0 ? (                        users.map(user => (                            <tr key={user._id}>                                <td>                                    <div className={style.userAvatar}>                                        <img src={user.avatar || "/default-avatar.png"} alt="User"/>                                        <div className={style.userName}>                                            <h4>{user.name}</h4>                                            <small>{user.username}</small>                                        </div>                                    </div>                                </td>                                <td>{user.email}</td>                                <td>                                        <span className={`${style.statusBadge} ${style[`status${user.status}`]}`}>                                            {user.status}                                        </span>                                </td>                                <td style={{                                    textAlign: 'center',                                    fontSize: '20px',                                    fontWeight: 'bold',                                    height: '100%'                                }}>                                    {user?.tasks.length}                                    <span className={style.viewTasks}                                          onClick={() => getTasksFromUser(user._id)}>view tasks</span>                                </td>                                <td style={{                                    display: 'flex',                                    justifyContent: 'space-between',                                    alignItems: 'center',                                    flexDirection: 'column'                                }}>                                    <button className={`${style.actionBtn} ${style.blockBtn}`}                                            onClick={() => updateStatus(user._id, user.status)}>                                        <i className={`fas ${user.status === "blocked" ? "fa-lock-open" : "fa-ban"}`}></i>                                    </button>                                    <button className={`${style.actionBtn} ${style.deleteBtn}`}                                            onClick={() => removeUser(user._id)}>                                        <i className="fas fa-trash"></i>                                    </button>                                    <button className={`${style.actionBtn} ${style.addBtn}`}                                            onClick={() => {                                                setTaskModal(true);                                                setSelectedUserId(user._id)                                            }}>                                        <i className="fas fa-plus"></i>                                    </button>                                </td>                            </tr>                        ))                    ) : (                        <tr>                            <td colSpan="5">No users found.</td>                        </tr>                    )}                    </tbody>                </table>            </section>            {taskModal && (                <div className={style.modal}>                    <form className={style.taskForm} id="mainTaskForm" onSubmit={handleAdd}>                        <IoCloseSharp className={style.closeBtn} onClick={() => setTaskModal(false)}/>                        <div className={style.formGroup}>                            <label htmlFor="taskTitle">Task Title</label>                            <input                                type="text"                                id="taskTitle"                                placeholder="What needs to be done?"                                value={title}                                name={'title'}                                onChange={changeTasksData}                            />                        </div>                        <div className={style.formGroup}>                            <label htmlFor="taskDescription">Description</label>                            <textarea                                id="taskDescription"                                rows="3"                                placeholder="Add details..."                                value={description}                                name={'description'}                                onChange={changeTasksData}                            ></textarea>                        </div>                        <div className={style.formGroup}>                            <label>Status</label>                            <select                                id="taskStatus"                                value={status}                                name="status"                                onChange={changeTasksData}                            >                                <option value="pending">Pending</option>                                <option value="in-progress">In Progress</option>                                <option value="completed">Completed</option>                            </select>                        </div>                        <button type="submit" className="btn btn-primary">                            <i className="fas fa-plus"></i> Add Task                        </button>                    </form>                </div>            )}        </div>    );}export default Dashboard;